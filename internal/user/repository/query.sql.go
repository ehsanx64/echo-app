// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const create = `-- name: Create :execresult
INSERT INTO users (
  name
) VALUES (
  ?
)
`

func (q *Queries) Create(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, create, name)
}

const fetch = `-- name: Fetch :many
SELECT id, name FROM users
ORDER BY name
`

func (q *Queries) Fetch(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, fetch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get = `-- name: Get :one
SELECT id, name FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
